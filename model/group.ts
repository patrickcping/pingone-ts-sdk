/**
 * PingOne Platform API - Management
 * A bare-bones collection for the PingOne API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { GroupDirectMemberCounts } from './groupDirectMemberCounts';
import { GroupTotalMemberCounts } from './groupTotalMemberCounts';
import { ObjectEnvironment } from './objectEnvironment';
import { ObjectPopulation } from './objectPopulation';

export class Group {
    /**
    * The unique identifier for the group. Search all groups for a specific group ID with a SCIM filter on GET /environments/{envID}/groups. Retrieve all the group IDs associated with a user with GET /environments/{envID}/users/{userID}?include=memberOfGroupIDs.
    */
    'id'?: string;
    'environment'?: ObjectEnvironment;
    'population'?: ObjectPopulation;
    /**
    * The group name. A group name can be reused across populations, but the same user cannot belong to multiple groups with the same group name. Population groups cannot share a group name with an environment group. Search all groups for a specific group name with a SCIM filter on GET /environments/{envID}/groups. Retrieve all the group names associated with a user with GET /environments/{envID}/users/{userID}?include=memberOfGroupNames. Use this operation to determine group membership in attribute mappings for claims and assertions.
    */
    'name'?: string;
    /**
    * A SCIM filter that determines which users are dynamically added to the group. For more information, see Adding users to a group and Removing users from a group.
    */
    'userFilter'?: string;
    /**
    * The group description.
    */
    'description'?: string;
    /**
    * A user-defined identifier for the group. Use this propertry to syncronize a group in PingOne with the same group in an external system. PingOne does not directly use this property. Search all groups for a specific external ID with a SCIM filter on GET /environments/{envID}/groups
    */
    'externalId'?: string;
    /**
    * Optional User-defined custom data.
    */
    'customData'?: object;
    'directMemberCounts'?: GroupDirectMemberCounts;
    'totalMemberCounts'?: GroupTotalMemberCounts;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "environment",
            "baseName": "environment",
            "type": "ObjectEnvironment"
        },
        {
            "name": "population",
            "baseName": "population",
            "type": "ObjectPopulation"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "userFilter",
            "baseName": "userFilter",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "externalId",
            "baseName": "externalId",
            "type": "string"
        },
        {
            "name": "customData",
            "baseName": "customData",
            "type": "object"
        },
        {
            "name": "directMemberCounts",
            "baseName": "directMemberCounts",
            "type": "GroupDirectMemberCounts"
        },
        {
            "name": "totalMemberCounts",
            "baseName": "totalMemberCounts",
            "type": "GroupTotalMemberCounts"
        }    ];

    static getAttributeTypeMap() {
        return Group.attributeTypeMap;
    }
}

