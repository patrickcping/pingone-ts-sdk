/**
 * PingOne Platform API - Management
 * A bare-bones collection for the PingOne API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { RequestFile } from './models';
import { ObjectEnvironment } from './objectEnvironment';
import { SchemaAttributeSchema } from './schemaAttributeSchema';

export class SchemaAttribute {
    /**
    * A string that specifies an optional property that specifies the description of the attribute. If provided, it must not be an empty string. Valid characters consists of any Unicode letter, mark (for example, accent or umlaut), numeric character, punctuation character, or space.
    */
    'description'?: string;
    /**
    * A string that specifies an optional property that specifies the display name of the attribute such as \'T-shirt size’. If provided, it must not be an empty string. Valid characters consist of any Unicode letter, mark (for example, accent or umlaut), numeric character, forward slash, dot, apostrophe, underscore, space, or hyphen.
    */
    'displayName'?: string;
    /**
    * A boolean that specifies whether or not the attribute is enabled. This is a required property for POST and PUT operations; it cannot be omitted or explicitly set to null. Disabled attributes are ignored on create/update and not returned on read.
    */
    'enabled'?: boolean;
    'environment'?: ObjectEnvironment;
    /**
    * A string that specifies the resource’s unique identifier.
    */
    'id'?: string;
    /**
    * A string that specifies the LDAP attribute.
    */
    'ldapAttribute'?: string;
    /**
    * A string that specifies the name of the attribute. The attribute name must be provided during creation, must not be empty and must not exceed 256 characters. It must also be unique within the schema for an environment. It must start with a letter and may be followed by letters, numbers or hyphens.
    */
    'name'?: string;
    /**
    * A boolean that specifies whether or not the attribute is required. Required attributes must be provided a value during create/update. Defaults to false if not provided.
    */
    'required'?: boolean;
    'schema'?: SchemaAttributeSchema;
    /**
    * A string that specifies the schema type of the attribute. It may be one of CORE, STANDARD or CUSTOM. Core and standard attributes are present out-of-the-box. Core attributes may not be updated or deleted. Standard attributes may not be deleted, but their mutable properties may be updated. Custom attributes may be deleted, and their mutable properties may be updated. New attributes are created with a schema type of CUSTOM.
    */
    'schemaType'?: SchemaAttribute.SchemaTypeEnum;
    /**
    * A string that specifies the the type of the attribute. It may be one of STRING, JSON, BOOLEAN, or COMPLEX. If the type is not provided during creation, then it defaults to STRING. Complex and boolean attributes may not be created, but standard attributes of those types may be updated. JSON attributes are limited by size (total size must not exceed 16KB).
    */
    'type'?: SchemaAttribute.TypeEnum;
    /**
    * A boolean that specifies whether or not the attribute must have a unique value within the environment. This is a required property for POST and PUT operations; it cannot be omitted or explicitly set to null.
    */
    'unique'?: boolean;
    /**
    * A boolean that specifies whether the attribute has multiple values or a single one. This value can only change from false to true, as changing from true to false is not allowed. Maximum number of values stored is 1,000.
    */
    'multiValued'?: boolean;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "displayName",
            "baseName": "displayName",
            "type": "string"
        },
        {
            "name": "enabled",
            "baseName": "enabled",
            "type": "boolean"
        },
        {
            "name": "environment",
            "baseName": "environment",
            "type": "ObjectEnvironment"
        },
        {
            "name": "id",
            "baseName": "id",
            "type": "string"
        },
        {
            "name": "ldapAttribute",
            "baseName": "ldapAttribute",
            "type": "string"
        },
        {
            "name": "name",
            "baseName": "name",
            "type": "string"
        },
        {
            "name": "required",
            "baseName": "required",
            "type": "boolean"
        },
        {
            "name": "schema",
            "baseName": "schema",
            "type": "SchemaAttributeSchema"
        },
        {
            "name": "schemaType",
            "baseName": "schemaType",
            "type": "SchemaAttribute.SchemaTypeEnum"
        },
        {
            "name": "type",
            "baseName": "type",
            "type": "SchemaAttribute.TypeEnum"
        },
        {
            "name": "unique",
            "baseName": "unique",
            "type": "boolean"
        },
        {
            "name": "multiValued",
            "baseName": "multiValued",
            "type": "boolean"
        }    ];

    static getAttributeTypeMap() {
        return SchemaAttribute.attributeTypeMap;
    }
}

export namespace SchemaAttribute {
    export enum SchemaTypeEnum {
        Core = <any> 'CORE',
        Standard = <any> 'STANDARD',
        Custom = <any> 'CUSTOM'
    }
    export enum TypeEnum {
        String = <any> 'STRING',
        Json = <any> 'JSON',
        Boolean = <any> 'BOOLEAN',
        Complex = <any> 'COMPLEX'
    }
}
